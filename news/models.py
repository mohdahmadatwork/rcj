
import uuid
from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()

class NewsItem(models.Model):
    CATEGORY_CHOICES = [
        ('announcement','Announcement'),
        ('sale','Sale'),
        ('promotion','Promotion'),
        ('update','Update'),
        ('event','Event'),
        ('personal','Personal'),
        ('system','System'),  # Added for system notifications
    ]
    
    PRIORITY_CHOICES = [
        ('high','High'),
        ('medium','Medium'),
        ('low','Low')
    ]
    
    TARGET_TYPE_CHOICES = [
        ('all', 'All Users'),
        ('specific_user', 'Specific User'),
        ('user_group', 'User Group'),
        ('customer_segment', 'Customer Segment'),
    ]

    # Your existing fields
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    title = models.CharField(max_length=200)
    content = models.TextField()
    excerpt = models.CharField(max_length=500)
    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)
    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES)
    author = models.CharField(max_length=100)
    published_at = models.DateTimeField()
    expires_at = models.DateTimeField(null=True, blank=True)
    image_url = models.URLField(null=True, blank=True)
    is_public = models.BooleanField(default=True)
    target_user = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)
    tags = models.JSONField(default=list)
    action_button = models.JSONField(null=True, blank=True)
    read_by = models.ManyToManyField(User, blank=True, related_name='read_news_items')
    
    # NEW FIELDS TO ADD - All have default values for existing data
    created_at = models.DateTimeField(auto_now_add=True, null=True, blank=True)
    updated_at = models.DateTimeField(auto_now=True, null=True, blank=True)
    
    # Targeting system with defaults
    target_type = models.CharField(
        max_length=20, 
        choices=TARGET_TYPE_CHOICES, 
        default='all',
        help_text="How to target this news item"
    )
    
    # Group targeting (for future use)
    target_users = models.ManyToManyField(
        User,
        blank=True,
        related_name='group_targeted_news',
        help_text="Multiple users this news is targeted to"
    )
    
    # Customer segment targeting
    target_customer_type = models.CharField(
        max_length=20,
        choices=[
            ('vip', 'VIP Customers'),
            ('new', 'New Customers'),
            ('regular', 'Regular Customers'),
            ('inactive', 'Inactive Customers'),
        ],
        null=True,
        blank=True,
        default=None,
        help_text="Customer segment to target"
    )
    
    # Order-related targeting
    target_order_status = models.CharField(
        max_length=20,
        choices=[
            ('new', 'New Orders'),
            ('confirmed', 'Confirmed Orders'),
            ('cad_done', 'CAD Done'),
            ('rpt_done', 'RPT Done'),
            ('casting', 'Casting'),
            ('ready', 'Ready'),
            ('delivered', 'Delivered'),
        ],
        null=True,
        blank=True,
        default=None,
        help_text="Target users with specific order status"
    )
    
    # Analytics and tracking
    click_count = models.PositiveIntegerField(
        default=0,
        help_text="Number of clicks on action button"
    )
    
    # Auto-generated fields
    auto_generated = models.BooleanField(
        default=False,
        help_text="Whether this news was auto-generated by the system"
    )
    
    related_order_id = models.CharField(
        max_length=50,
        null=True,
        blank=True,
        default=None,
        help_text="Related order ID for order-specific news"
    )

    class Meta:
        ordering = ['-published_at']
        indexes = [
            models.Index(fields=['target_type', 'is_public']),
            models.Index(fields=['category', 'priority']),
            models.Index(fields=['published_at', 'expires_at']),
            models.Index(fields=['target_user']),
            models.Index(fields=['auto_generated']),
        ]

    def __str__(self):
        return f"{self.title} ({self.get_category_display()})"

    def is_targeted_to_user(self, user):
        """Check if this news item is targeted to a specific user"""
        if self.target_type == 'all' and self.is_public:
            return True
        
        if self.target_type == 'specific_user' and self.target_user == user:
            return True
        
        if self.target_type == 'user_group' and user in self.target_users.all():
            return True
        
        if self.target_type == 'customer_segment':
            return self._is_user_in_segment(user)
        
        return False
    
    def _is_user_in_segment(self, user):
        """Helper method to check if user belongs to target customer segment"""
        if not self.target_customer_type:
            return False
            
        # Basic customer segmentation logic - expand as needed
        if self.target_customer_type == 'vip':
            # Define VIP logic (e.g., high order value customers)
            return getattr(user, 'is_vip', False)
        elif self.target_customer_type == 'new':
            # New customers (registered in last 30 days)
            from django.utils import timezone
            from datetime import timedelta
            thirty_days_ago = timezone.now() - timedelta(days=30)
            return user.date_joined >= thirty_days_ago
        elif self.target_customer_type == 'regular':
            return True  # All customers for now
        elif self.target_customer_type == 'inactive':
            # Customers who haven't logged in for 90 days
            from django.utils import timezone
            from datetime import timedelta
            ninety_days_ago = timezone.now() - timedelta(days=90)
            return user.last_login and user.last_login <= ninety_days_ago
        
        return False

    @property
    def read_count(self):
        """Get the number of users who have read this news"""
        return self.read_by.count()


class NewsReadTracker(models.Model):
    """Track when users read news items with detailed timestamps"""
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    news_item = models.ForeignKey(NewsItem, on_delete=models.CASCADE)
    read_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ('user', 'news_item')
        ordering = ['-read_at']
        indexes = [
            models.Index(fields=['user', 'read_at']),
            models.Index(fields=['news_item', 'read_at']),
        ]

    def __str__(self):
        return f"{self.user.username} read {self.news_item.title}"


# After adding this to your models.py, run:
# python manage.py makemigrations
# python manage.py migrate